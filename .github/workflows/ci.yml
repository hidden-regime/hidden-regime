name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,ml]

    - name: Debug package structure
      run: |
        echo "=== Installed packages ==="
        pip list | grep hidden-regime
        echo "=== Python import test ==="
        python -c "import sys; print(f'Python path: {sys.path[:3]}...')"
        echo "=== Package structure check ==="
        python -c "
        import os, sys
        pkg_path = None
        for path in sys.path:
            test_path = os.path.join(path, 'hidden_regime')
            if os.path.exists(test_path):
                pkg_path = test_path
                break
        if pkg_path:
            print(f'Package found at: {pkg_path}')
            for root, dirs, files in os.walk(pkg_path):
                if '__pycache__' not in root:
                    level = root.replace(pkg_path, '').count(os.sep)
                    indent = '  ' * level
                    print(f'{indent}{os.path.basename(root)}/')
                    subindent = '  ' * (level + 1)
                    for file in files:
                        if not file.endswith('.pyc'):
                            print(f'{subindent}{file}')
        else:
            print('Package not found in sys.path')
        "
        echo "=== Import test ==="
        python -c "
        try:
            import hidden_regime
            print('[OK] hidden_regime imported successfully')
            try:
                from hidden_regime.data import DataLoader
                print('[OK] hidden_regime.data imported successfully')
            except ImportError as e:
                print(f'[ERROR] hidden_regime.data failed: {e}')
        except ImportError as e:
            print(f'[ERROR] hidden_regime failed: {e}')
        "

    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --strict-markers --disable-warnings --cov=hidden_regime --cov-report=xml --cov-report=term-missing
      env:
        # Prevent yfinance from making real API calls during testing
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
          pytest.log
        retention-days: 30

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: lint-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          lint-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check code formatting with Black
      run: |
        black --check --diff hidden_regime/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff hidden_regime/ tests/

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 hidden_regime/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 hidden_regime/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run security scan
      run: |
        bandit -r hidden_regime/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: integration-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          integration-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,ml]

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short --strict-markers
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Test package installation
      run: |
        pip uninstall -y hidden-regime
        pip install .
        python -c "import hidden_regime; print('Package installed successfully')"

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check README renders correctly
      run: |
        python -c "
        import sys
        try:
            with open('README.md', 'r', encoding='utf-8') as f:
                content = f.read()
            if len(content) < 100:
                sys.exit('README.md seems too short')
            print('README.md is valid')
        except Exception as e:
            print(f'README.md validation failed: {e}')
            sys.exit(1)
        "

    - name: Validate package metadata
      run: |
        python -m build --sdist --wheel
        twine check dist/*

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration-test]
    if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - name: Create Issue on Failure
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `CI Failure on ${context.ref}`;
          const body = `
          The CI workflow failed on branch ${context.ref}.
          
          **Commit:** ${context.sha}
          **Workflow:** ${context.workflow}
          **Run:** ${context.runId}
          
          Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci-failure']
          });